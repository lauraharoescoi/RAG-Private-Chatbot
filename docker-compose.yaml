services:
  postgres:
    container_name: chatbot_postgres
    build: ./postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: vectordb
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongo:
    container_name: chatbot_mongo
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - default
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    container_name: chatbot_backend
    build: ./backend
    ports:
      - "7001:8000"
    depends_on:
      - mongo
    environment:
      MONGO_URI: mongodb://chatbot_mongo:27017/
    volumes:
      - ./backend:/app
    networks:
      - default
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  llm_service:
    container_name: chatbot_llm_service
    build: ./llm_service
    ports:
      - "7000:80"
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./llm_service:/app
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    container_name: chatbot_frontend
    build: ./frontend
    ports:
      - "4201:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo_data:

networks:
  default:
    driver: bridge
